import datetime

from aiogram import types

from sql import crud
from sql.models import Chat
from utils import sstuapi
from main import dp, __version__


@dp.message_handler(commands=['start'])
async def main(message: types.Message):
    text = "–ë–æ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π –≤ —á–∞—Ç –∑–∞ 15 –º–∏–Ω—É—Ç " \
           "–¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏."
    await message.answer(text)


@dp.message_handler(commands=['help'])
async def main(message: types.Message):
    text = "–ö–æ–º–∞–Ω–¥–∞ /help. –î–æ–ø–∏—Å–∞—Ç—å!"
    await message.answer(text)


@dp.message_handler(commands=['about'])
async def main(message: types.Message):
    text = f"version: {__version__}\n" \
           "author: @wilidon\n" \
           "github: <a href='https://github.com/wilidon'>@wilidon</a>"
    await message.answer(text, disable_web_page_preview=True)


@dp.message_handler(commands=['group'])
async def main(message: types.Message):
    try:
        group_name = message.text.split(" ", 1)[1]
    except IndexError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: /group –±-–ü–ò–ù–ñ-11")
        return
    resp = await sstuapi.get_groups()
    if resp.get(group_name) is None:
        await message.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    chat = crud.get_chat_by_chat_id(chat_id=message.chat.id)
    if chat is None:
        chat = crud.create_chat(Chat(chat_id=message.chat.id,
                                     group_id=resp.get(group_name),
                                     group_name=group_name,
                                     countdown=15))
    else:
        chat = crud.update_chat_by_chat_id(chat_id=message.chat.id,
                                           group_id=resp.get(group_name),
                                           group_name=group_name)
    await message.answer(f"–î–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ "
                         f"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_name}.")


@dp.message_handler(commands=['rasp'])
async def main(message: types.Message):
    chat = crud.get_chat_by_chat_id(message.chat.id)
    if chat is None:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥—Ä—É–ø–ø—É "
                             "–∫–æ–º–∞–Ω–¥–æ–π /group –±-–ü–ò–ù–ñ-11")
    resp = await sstuapi.get_group(chat.group_id)
    date = datetime.date.today()
    c_day, c_month = date.day, date.month
    for k, v in resp.items():
        day, month = map(int, k.split("."))
        if c_day == day and c_month == month:
            break
    text = f"üìÜ –°–µ–≥–æ–¥–Ω—è: {v['name']}\n\n"
    for lesson in v['lessons']:
        if len(lesson['lesson_teacher']) == 2:
            text += f"üìö {lesson['lesson_hour']} - " \
                    f"{lesson['lesson_room']} - " \
                    f"{lesson['lesson_type']} - " \
                    f"{lesson['lesson_teacher'][0]}\n" \
                    f"{lesson['lesson_teacher'][1]}\n"
            continue
        text += f"üìö {lesson['lesson_hour']} - " \
                f"{lesson['lesson_room']} - " \
                f"{lesson['lesson_type']} - " \
                f"{lesson['lesson_name']}\n"
    await message.answer(text)


@dp.message_handler(content_types=["text"])
async def start(message: types.Message):
    await message.answer("ok")
